// define a variable to import the <Verifier> or <renamedVerifier> solidity contract generated by Zokrates
const Verifier = artifacts.require("Verifier");
const proofJson = require("./../../zokrates/zokrates/code/proof.json");

contract("Verifier", async () => {
    // Test verification with correct proof
    // - use the contents from proof.json generated from zokrates steps
    const proof = proofJson.proof;
    it("Test verification with correct proof", async () => {
        try {
            this.verifier = await Verifier.new();
            await this.verifier.verifyTx(proof.a, proof.b, proof.c, proofJson.inputs);
            //assert.ok("Verify success");
            //assert.equal(event, "Transaction successfully verified.", "Proof verify should success");
        } catch(e) {
            assert.fail("Verify should success");
        }
    });
  
    // Test verification with incorrect proof
    it("Test verification with incorrect proof", async () => {
        try {
            const fakeInput = ["0x1234000000000000000000000000000000000000000000000000000000000009", "0x4567000000000000000000000000000000000000000000000000000000000001"];
            //const inputs = [fakeInput];
            this.verifier = await Verifier.new();
            const result = await this.verifier.verifyTx(
                proof.a, 
                proof.b, 
                proof.c,
                fakeInput
            );
            //assert.equal(result, false, "Proof verify should failed");
            assert.fail("Verify should failed");
        } catch (e) {

        }
        
      
    });
  });